#!/usr/bin/env ruby

require "open3"

class FeuError < StandardError;end
class FeuParseError < FeuError;end
class FeuRuntimeError < FeuError;end

class Feu
    class END_MARKER;end

    def self.parse(lines, level=0)
        ast = []
        until lines.empty?
            line = lines.shift
            next if line.empty?
            return ast if line.downcase == "end"
            if line[0] == "/" or
               line == "loop" or
               line == "line" or
               line.start_with? "func" or
               line.start_with? "do"
                line = [line, parse(lines, level + 1)]
            end
            ast << line
        end
        fail FeuParseError, "Unmatched blocks" if level > 0
        ast
    end

    def initialize(ast, input, safe)
        @ast = ast
        @input = input
        @vars = {}
        @stack = []
        @funcs = {}
        @safe = safe
    end

    def expect(tokens, char)
        c = tokens.shift
        if c != char
            fail FeuParseError, "Expected #{char.inspect}, got #{c.inspect}"
        end
    end

    def eval_str(str)
        eval "%/#{str.gsub("#", "\\#").gsub /\\(\d+)/, %q{\\\\\\\\\1}}/" # dafuq
    end

    def read(tokens, end_char="/")
        s = ""
        c = nil
        loop do
            c = tokens.shift
            if c == "\\"
                c += tokens.shift
            elsif c == end_char or c.nil?
                break
            end
            s += c
        end
        s
    end

    def flag?(flags, flag)
        ok = flags.include? flag
        flags.gsub! flag, ""
        ok
    end

    def exec_line(tokens)
        tokens, body = tokens if tokens.class == Array
        if tokens == "loop"
            loop do
                break if _exec(body) == END_MARKER
            end
            return
        elsif tokens == "line"
            lines = @input.lines.map &:chomp
            lines_ = []
            lines.each do |line|
                @input = line
                break if _exec(body) == END_MARKER
                lines_ << @input
            end
            @input = lines_.join "\n"
            return
        elsif tokens == "print"
            STDOUT.write @input
            return
        elsif tokens.start_with? "do"
            arr = tokens.split(/\s+/).drop 1
            fail FeuParseError, "Expected 1 argument to do, got #{arr.length}" if arr.length != 1
            (1..arr[0].to_i).each do |_|
                break if _exec(body) == END_MARKER
            end
            return
        elsif tokens.start_with? "func"
            arr = tokens.split(/\s+/).drop 1
            fail FeuParseError, "Expected 1 argument to func, got #{arr.length}" if arr.length != 1
            @funcs[arr[0]] = body
            return
        elsif tokens.start_with? "call"
            arr = tokens.split(/\s+/).drop 1
            fail FeuParseError, "Expected 1 argument to call, got #{arr.length}" if arr.length != 1
            func = @funcs[arr[0]]
            _exec func
            return
        end
        tokens = tokens.chars
        mode = tokens.shift
        case mode
        when "/"
            regex = read tokens
            flags = read tokens, nil
            g = flag? flags, "g"
            matches = @input.scan Regexp.new(regex, flags)
            matches = matches.take 1 unless g
            str = ""
            matches.each do |match|
                @input = match
                break if _exec(body) == END_MARKER
                str += @input
            end
            @input = str
        when "s"
            expect tokens, "/"
            regex = read tokens
            sub = eval_str read tokens
            flags = read tokens, nil
            g = flag? flags, "g"
            re = Regexp.new regex, flags
            if g
                @input.gsub! re, sub
            else
                @input.sub! re, sub
            end
        when "e"
            expect tokens, "/"
            regex = read tokens
            flags = read tokens, nil
            flag? flags, "g"
            nflag = flag? flags, "!"
            b = @input =~ Regexp.new(regex, flags)
            b = !b if nflag
            return END_MARKER if b
        when "m"
            expect tokens, "/"
            map = {}
            flags = ""
            loop do
                a = read tokens
                if tokens.empty?
                    flags = a
                    break
                end
                b = read tokens
                map[a] = eval_str b
            end
            g = flag? flags, "g"
            flag? flags, "/"
            map.each do |k, v|
                re = Regexp.new k, flags
                if g
                    @input.gsub! re, v
                else
                    @input.sub! re, v
                end
            end
        when "a"
            expect tokens, "/"
            @input += eval_str read tokens, nil
        when "p"
            expect tokens, "/"
            @input = eval_str(read(tokens, nil)) + @input
        when "u"
            expect tokens, "/"
            c = eval_str read tokens, nil
            c = "0" if c.empty?
            fail FeuParseError, "Unary conversion only support single characters" if c.length != 1
            @input = c * @input.to_i.abs
        when "U"
            expect tokens, "/"
            c = eval_str read tokens, nil
            c = "0" if c.empty?
            fail FeuParseError, "Unary conversion only support single characters" if c.length != 1
            @input = @input.count c
        when "S"
            fail FeuRuntimeError, "Shell commands can't be executed in safe mode" if @safe
            expect tokens, "/"
            cmd = read tokens
            args = []
            until tokens.empty?
                args << read(tokens)
            end
            @input, _, _ = Open3.capture3 cmd, *args, :stdin_data => @input
        when "E"
            mode = tokens.shift
            case mode
            when "s"
                expect tokens, "/"
                var = read tokens
                regex = read tokens
                flags = read tokens, nil
                g = flag? flags, "g"
                re = Regexp.new regex, flags
                if g
                    s = @input.scan(re).join
                else
                    s = @input.match(re)[0]
                end
                @vars[var] = s
            when "p"
                expect tokens, "/"
                var = read tokens, nil
                @stack << @input
                @input = (@vars[var] or "")
            when "P"
                expect tokens, "/"
                var = read tokens, nil
                @vars[var] = @input
                @input = @stack.pop
            when "u"
                expect tokens, "/"
                var = read tokens, nil
                @vars[var] = ""
            when "a"
                expect tokens, "/"
                var = read tokens, nil
                @input += (@vars[var] or "")
            when "p"
                expect tokens, "/"
                var = read tokens, nil
                @input = (@vars[var] or "") + @input
            else
                fail FeuParseError, "Unknown extended mode #{mode.inspect}"
            end
        else
            fail FeuParseError, "Unknown mode #{mode.inspect}"
        end
    end

    def _exec(lines)
        lines.each do |line|
            return END_MARKER if exec_line(line) == END_MARKER
        end
    end
    
    def exec
        _exec @ast
        STDOUT.write @input
    end
end

USAGE = "\tFEU - File Edition Utility
Usage: #$0 [--safe] {<code>|-f <file>} [infile]

code\tFEU code
file\tFile containing FEU code
infile\tInput file (If ommited, read from STDIN)
--safe\tRun in safe mode (no subshells)"

if $0 == __FILE__
    unless ARGV.length >= 1 and ARGV.length <= 3
        puts USAGE
        exit 1
    end

    if ARGV.include? "--safe"
        safe = true
        ARGV.delete "--safe"
    else
        safe = false
    end

    arg = ARGV.shift
    if arg == "-f"
        code = File.read ARGV.shift
    else
        code = arg
    end

    lines = code.lines.map &:strip

    lines.shift if lines[0] =~ /^#!.+$/

    if lines.include? "__DATA__"
        _lines = []
        input = []
        arr = _lines
        lines.each do |line|
            if line == "__DATA__"
                arr = input
            else
                arr << line
            end
        end
        lines = _lines
        input = input.join "\n"
    else
        input = ARGV.empty? ? STDIN.read : File.read(ARGV.shift)
    end

    feu = Feu.new(Feu.parse(lines), input, safe)
    feu.exec
end
